import os
from pathlib import Path
from shutil import rmtree
from queue import Queue
import logging
import logging.handlers


def cleanup(tmp_folder: str, keep_tmp_files: bool, log_queue: Queue) -> None:
    """Removes the leftover files generated by the script or ffmpeg from the working directory."""
    handler = logging.handlers.QueueHandler(log_queue)
    root = logging.getLogger()
    root.addHandler(handler)
    root.setLevel(logging.INFO)

    print('\nCleaning up temp files...')
    logging.info('Cleaning up temp files...')
    tmpfile_list = ['IntroOutroList.txt', 'log.json', 'ffmpeg2pass-0.log']
    for tmp in tmpfile_list:
        try:
            os.remove(tmp)
        except FileNotFoundError:
            print(f"The file {tmp} does not exist.")
            logging.info(f"The file {tmp} does not exist.")
        except PermissionError:
            print(f"Insufficient permissions to delete the file {tmp}.")
            logging.error(f"Insufficient permissions to delete the file {tmp}.")
        except IsADirectoryError:
            print(f"{tmp} is a directory, not a file.")
            logging.error(f"{tmp} is a directory, not a file.")
        except OSError as e:
            print(f"Error deleting file {tmp}: {e.strerror}")
            logging.error(f"Error deleting file {tmp}: {e.strerror}")

    if Path(tmp_folder).exists() and not keep_tmp_files:
        tmpcleanup(tmp_folder)


def tmpcleanup(tmp_folder: str, log_queue: Queue) -> None:
    handler = logging.handlers.QueueHandler(log_queue)
    root = logging.getLogger()
    root.addHandler(handler)
    root.setLevel(logging.INFO)

    try:
        rmtree(tmp_folder)
    except FileNotFoundError:
        print(f"\nError cleaning up temp directory: {tmp_folder} does not exist.")
        logging.info(f"Error cleaning up temp directory: {tmp_folder} does not exist.")
    except PermissionError:
        print(f"\nError cleaning up temp directory: Insufficient permissions to delete {tmp_folder}.")
        logging.error(f"Error cleaning up temp directory: Insufficient permissions to delete {tmp_folder}.")
    except OSError as e:
        print(f"\nError cleaning up temp directory: {e.strerror}")
        logging.error(f"Error cleaning up temp directory: {e.strerror}")


def CreateTempFolder(tmp_folder: str) -> None:
    """Creates the temporary folder used for chunk-based encoding and audio extraction.
    If the folder already exists, it will be wiped first."""
    directories = [tmp_folder, Path(tmp_folder) / 'prepared', Path(tmp_folder) / 'converted']

    for directory in directories:
        if Path(directory).exists():
            tmpcleanup(tmp_folder)
        os.mkdir(directory)


if __name__ == '__main__':
    print('This file should not be run as a standalone script!')
